// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class MsgIBCSend {
  static encode(message: MsgIBCSend, writer: Writer): void {
    writer.uint32(18);
    writer.string(message.channel);

    writer.uint32(32);
    writer.uint64(message.timeoutHeight);

    writer.uint32(40);
    writer.uint64(message.timeoutTimestamp);

    writer.uint32(50);
    writer.bytes(message.data);
  }

  static decode(reader: Reader, length: i32): MsgIBCSend {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgIBCSend();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          message.channel = reader.string();
          break;

        case 4:
          message.timeoutHeight = reader.uint64();
          break;

        case 5:
          message.timeoutTimestamp = reader.uint64();
          break;

        case 6:
          message.data = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  channel: string;
  timeoutHeight: u64;
  timeoutTimestamp: u64;
  data: Uint8Array;

  constructor(
    channel: string = "",
    timeoutHeight: u64 = 0,
    timeoutTimestamp: u64 = 0,
    data: Uint8Array = new Uint8Array(0)
  ) {
    this.channel = channel;
    this.timeoutHeight = timeoutHeight;
    this.timeoutTimestamp = timeoutTimestamp;
    this.data = data;
  }
}

export function encodeMsgIBCSend(message: MsgIBCSend): Uint8Array {
  return Protobuf.encode(message, MsgIBCSend.encode);
}

export function decodeMsgIBCSend(buffer: Uint8Array): MsgIBCSend {
  return Protobuf.decode<MsgIBCSend>(buffer, MsgIBCSend.decode);
}
